var fs = require('fs');
var path = require('path');
const readline = require('readline');
const { once } = require('node:events');
let getDirName = require('path').dirname;

let snippetsFolder = path.join(__dirname, "snippets")

let services = ["AdService", "AnalyticsService", "AntiAddictionService", "AppStorageService", "AppUpdateService", "AssetCounterService", "AssetDeliveryProxy", "AssetManagerService", "AssetService", "AvatarEditorService", "BadgeService", "BrowserService", "BulkImportService",
"CacheableContentProvider", "ChangeHistoryService", "Chat", "ClusterPacketCache", "CollectionService", "ContentProvider", "ContextActionService", "ControllerService", "CookiesService", "CoreGui", "CorePackages", "CoreScriptSyncService", "CSGDictionaryService",
"DataStoreService", "Debris", "DebuggerManager", "DraftsService", "EventIngestService", "FileSyncService", "FlagStandService", "FlyweightService", "FriendService", "GamepadService", "GamePassService", "Geometry", "GoogleAnalyticsConfiguration", "GroupService", "GuidRegistryService", "GuiService",
"HapticService", "HeightmapImporterService", "Hopper", "HttpRbxApiService", "HttpService",
"ILegacyStudioBridge", "InsertService", "InstancePacketCache", "InternalSyncService", "JointsService" , "KeyboardService", "KeyframeSequenceProvider",
"LanguageService", "LegacyStudioBridge", "Lighting", "LocalizationService", "LocalStorageService", "LoginService", "LogService", "LuaWebService",
"MarketplaceService", "MaterialService", "MemStorageService", "MeshContentProvider", "MessagingService", "MouseService",
"NavigationService", "NetworkClient", "NetworkServer", "NetworkSettings", "NotificationService", "NonReplicatedCSGDictionaryService",
"PackageService", "PathfindingService", "PermissionsService", "PersonalServerService", "PhysicsPacketCache", "PhysicsService", "PlayerEmulatorService", "Players", "PluginDebugService", "PluginGuiService", "PointsService", "PolicyService", "PresenceService", "ProximityPromptService",
"RbxAnalyticsService", "RenderSettings", "ReplicatedFirst", "ReplicatedStorage", "RobloxPluginGuiService", "RobloxReplicatedStorage", "RunService", "RuntimeScriptService", 
"ScriptContext", "ScriptService", "Selection", "ServerScriptService", "ServerStorage", "SessionService", "SocialService", "SolidModelContentProvider", "SoundService", "SpawnerService", "StarterGui", "StarterPack", "StarterPlayer", "Stats", "StopWatchReporter", "Studio", "StudioData", "StudioService",
"TaskScheduler", "Teams", "TeleportService", "TestService", "TextChatService", "TextService", "ThirdPartyUserService", "TimerService", "TouchInputService", "TracerService", "TweenService", 
"UGCValidationService", "UnvalidatedAssetService", "UserInputService", "UserService", "UserStorageService", "VersionControlService", "VirtualInputManager", "VirtualUser", "Visit", "VoiceChatService", "VRService", "Workspace"
]

let generatedSnippets = []
let loadedCount = 0
let fileCount = 0

function FinishProgram(){
    let finalString = "{\n"

    for(let i = 0; i < generatedSnippets.length; i++){
        let snippet = generatedSnippets[i]
        let isFinal = i == generatedSnippets.length - 1

        finalString += `${snippet}`
        if(!isFinal)
            finalString += ",\n"
        else
            finalString += "\n"
    }

    finalString += "}"

    fs.writeFile("finalSnippets.json", finalString, (err)=>{
        if(err)
            console.log(err)
    })
}

async function readFile(fullFilePath){
    let fileContent = readline.createInterface({
        input: fs.createReadStream(fullFilePath)
    });

    let cleanedContent = ""
    let count = 0
    fileContent.on('line', (line) => {
        if(count > 0)
            cleanedContent += ",\n"

        let cleanLine = ""
        for(let i = 0; i < line.length; i++){

            if(line[i] == '"')
                cleanLine += "\\\""
            else
                cleanLine += line[i]
        }

        cleanedContent += `\t\t"${cleanLine}"`

        count += 1
    })

    await once(fileContent, 'close');

    return cleanedContent
}

async function loadFile(fullFilePath){
    let pathDirectories = fullFilePath.split("\\")
    let file = pathDirectories[pathDirectories.length - 1]
    let words = file.split(".")
    let fileType = words[words.length - 1]
    let fileName = words[0]

    let finalString = ""

    let prefixes = ""
    for(let i = 0; i < words.length; i++){
        if (i == words.length - 1) {
            continue
        }

        if(i > 0){
            prefixes += ","
        }
        prefixes += '"'+words[i]+'"'
    }


    let cleanedContent = await readFile(fullFilePath)      

    finalString += `"${fileName}": {\n`
    finalString += `\t"scope": "${fileType}",\n` //Scope
    finalString += `\t"prefix": [${prefixes}],\n` //Prefixes
    finalString += `\t"body":[\n${cleanedContent}\n\t],\n`
    finalString += `\t"description": "This Snippet was auto generated by @Prooheckcp's program"\n`
    finalString += "\t}"

    generatedSnippets.push(finalString)
    
    loadedCount += 1
    if(loadedCount == fileCount){
        FinishProgram();
    }
}

let folders = fs.readdirSync(snippetsFolder)
let files = []

folders.forEach((folder)=>{
    let folderFiles = fs.readdirSync(path.join(snippetsFolder, folder))
    folderFiles.forEach((file)=>{
        files.push(path.join(snippetsFolder, folder, file))
    })
})

function writeFile(path, contents, cb) {
    fs.mkdir(getDirName(path), { recursive: true}, function (err) {
      if (err) return cb(err);
  
      fs.writeFile(path, contents, cb);
    });
  }

services.forEach(service=>{
    console.log("Writting...")
    let code = `local ${service} = game:GetService("${service}")`
    writeFile(`snippets/Services/${service}.lua`, code, (err)=>{})
})

files.forEach((file)=>{
    fileCount += 1
    loadFile(file)
})